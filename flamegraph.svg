<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="5131"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0195%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0000%" y="197" width="0.0195%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.10%)</title><rect x="0.0195%" y="149" width="0.0974%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="5"/><text x="0.2695%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.08%)</title><rect x="0.1169%" y="149" width="0.0780%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="4"/><text x="0.3669%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.27%)</title><rect x="0.1949%" y="149" width="0.2729%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="14"/><text x="0.4449%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.4677%" y="149" width="0.0195%" height="15" fill="rgb(232,128,0)" fg:x="24" fg:w="1"/><text x="0.7177%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.18%)</title><rect x="0.4872%" y="149" width="0.1754%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="9"/><text x="0.7372%" y="159.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_legal_moves (1 samples, 0.02%)</title><rect x="0.6626%" y="149" width="0.0195%" height="15" fill="rgb(228,23,34)" fg:x="34" fg:w="1"/><text x="0.9126%" y="159.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="0.6821%" y="149" width="0.0390%" height="15" fill="rgb(218,30,26)" fg:x="35" fg:w="2"/><text x="0.9321%" y="159.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::game::Game::apply_move (5 samples, 0.10%)</title><rect x="0.7211%" y="149" width="0.0974%" height="15" fill="rgb(220,122,19)" fg:x="37" fg:w="5"/><text x="0.9711%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (4 samples, 0.08%)</title><rect x="1.7151%" y="133" width="0.0780%" height="15" fill="rgb(250,228,42)" fg:x="88" fg:w="4"/><text x="1.9651%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.10%)</title><rect x="1.7930%" y="133" width="0.0974%" height="15" fill="rgb(240,193,28)" fg:x="92" fg:w="5"/><text x="2.0430%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.12%)</title><rect x="1.8905%" y="133" width="0.1169%" height="15" fill="rgb(216,20,37)" fg:x="97" fg:w="6"/><text x="2.1405%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (8 samples, 0.16%)</title><rect x="2.0074%" y="133" width="0.1559%" height="15" fill="rgb(206,188,39)" fg:x="103" fg:w="8"/><text x="2.2574%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.14%)</title><rect x="2.1633%" y="133" width="0.1364%" height="15" fill="rgb(217,207,13)" fg:x="111" fg:w="7"/><text x="2.4133%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="2.2997%" y="133" width="0.0195%" height="15" fill="rgb(231,73,38)" fg:x="118" fg:w="1"/><text x="2.5497%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.19%)</title><rect x="3.7225%" y="101" width="0.1949%" height="15" fill="rgb(225,20,46)" fg:x="191" fg:w="10"/><text x="3.9725%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (84 samples, 1.64%)</title><rect x="2.3192%" y="133" width="1.6371%" height="15" fill="rgb(210,31,41)" fg:x="119" fg:w="84"/><text x="2.5692%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (41 samples, 0.80%)</title><rect x="3.1573%" y="117" width="0.7991%" height="15" fill="rgb(221,200,47)" fg:x="162" fg:w="41"/><text x="3.4073%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="3.9174%" y="101" width="0.0390%" height="15" fill="rgb(226,26,5)" fg:x="201" fg:w="2"/><text x="4.1674%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.08%)</title><rect x="3.9563%" y="133" width="0.0780%" height="15" fill="rgb(249,33,26)" fg:x="203" fg:w="4"/><text x="4.2063%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="4.0343%" y="133" width="0.0390%" height="15" fill="rgb(235,183,28)" fg:x="207" fg:w="2"/><text x="4.2843%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.18%)</title><rect x="4.0733%" y="133" width="0.1754%" height="15" fill="rgb(221,5,38)" fg:x="209" fg:w="9"/><text x="4.3233%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.47%)</title><rect x="4.2487%" y="133" width="0.4677%" height="15" fill="rgb(247,18,42)" fg:x="218" fg:w="24"/><text x="4.4987%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.25%)</title><rect x="8.7897%" y="117" width="0.2534%" height="15" fill="rgb(241,131,45)" fg:x="451" fg:w="13"/><text x="9.0397%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (27 samples, 0.53%)</title><rect x="9.0431%" y="117" width="0.5262%" height="15" fill="rgb(249,31,29)" fg:x="464" fg:w="27"/><text x="9.2931%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (23 samples, 0.45%)</title><rect x="9.5693%" y="117" width="0.4483%" height="15" fill="rgb(225,111,53)" fg:x="491" fg:w="23"/><text x="9.8193%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.88%)</title><rect x="10.0175%" y="117" width="0.8770%" height="15" fill="rgb(238,160,17)" fg:x="514" fg:w="45"/><text x="10.2675%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.43%)</title><rect x="10.8946%" y="117" width="0.4288%" height="15" fill="rgb(214,148,48)" fg:x="559" fg:w="22"/><text x="11.1446%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.10%)</title><rect x="11.3233%" y="117" width="0.0974%" height="15" fill="rgb(232,36,49)" fg:x="581" fg:w="5"/><text x="11.5733%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="11.4208%" y="117" width="0.0195%" height="15" fill="rgb(209,103,24)" fg:x="586" fg:w="1"/><text x="11.6708%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (8 samples, 0.16%)</title><rect x="11.6936%" y="101" width="0.1559%" height="15" fill="rgb(229,88,8)" fg:x="600" fg:w="8"/><text x="11.9436%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="11.8495%" y="101" width="0.0585%" height="15" fill="rgb(213,181,19)" fg:x="608" fg:w="3"/><text x="12.0995%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.12%)</title><rect x="12.2393%" y="85" width="0.1169%" height="15" fill="rgb(254,191,54)" fg:x="628" fg:w="6"/><text x="12.4893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.08%)</title><rect x="12.8630%" y="69" width="0.0780%" height="15" fill="rgb(241,83,37)" fg:x="660" fg:w="4"/><text x="13.1130%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (83 samples, 1.62%)</title><rect x="11.4403%" y="117" width="1.6176%" height="15" fill="rgb(233,36,39)" fg:x="587" fg:w="83"/><text x="11.6903%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (59 samples, 1.15%)</title><rect x="11.9080%" y="101" width="1.1499%" height="15" fill="rgb(226,3,54)" fg:x="611" fg:w="59"/><text x="12.1580%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.70%)</title><rect x="12.3563%" y="85" width="0.7016%" height="15" fill="rgb(245,192,40)" fg:x="634" fg:w="36"/><text x="12.6063%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.12%)</title><rect x="12.9409%" y="69" width="0.1169%" height="15" fill="rgb(238,167,29)" fg:x="664" fg:w="6"/><text x="13.1909%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="13.0579%" y="117" width="0.0390%" height="15" fill="rgb(232,182,51)" fg:x="670" fg:w="2"/><text x="13.3079%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 1.31%)</title><rect x="13.0969%" y="117" width="1.3058%" height="15" fill="rgb(231,60,39)" fg:x="672" fg:w="67"/><text x="13.3469%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (10 samples, 0.19%)</title><rect x="15.3187%" y="101" width="0.1949%" height="15" fill="rgb(208,69,12)" fg:x="786" fg:w="10"/><text x="15.5687%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (118 samples, 2.30%)</title><rect x="15.5135%" y="101" width="2.2997%" height="15" fill="rgb(235,93,37)" fg:x="796" fg:w="118"/><text x="15.7635%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (27 samples, 0.53%)</title><rect x="17.8133%" y="101" width="0.5262%" height="15" fill="rgb(213,116,39)" fg:x="914" fg:w="27"/><text x="18.0633%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (19 samples, 0.37%)</title><rect x="18.3395%" y="101" width="0.3703%" height="15" fill="rgb(222,207,29)" fg:x="941" fg:w="19"/><text x="18.5895%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (86 samples, 1.68%)</title><rect x="18.7098%" y="101" width="1.6761%" height="15" fill="rgb(206,96,30)" fg:x="960" fg:w="86"/><text x="18.9598%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.66%)</title><rect x="25.2582%" y="69" width="0.6626%" height="15" fill="rgb(218,138,4)" fg:x="1296" fg:w="34"/><text x="25.5082%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (303 samples, 5.91%)</title><rect x="20.3859%" y="101" width="5.9053%" height="15" fill="rgb(250,191,14)" fg:x="1046" fg:w="303"/><text x="20.6359%" y="111.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (189 samples, 3.68%)</title><rect x="22.6077%" y="85" width="3.6835%" height="15" fill="rgb(239,60,40)" fg:x="1160" fg:w="189"/><text x="22.8577%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (19 samples, 0.37%)</title><rect x="25.9209%" y="69" width="0.3703%" height="15" fill="rgb(206,27,48)" fg:x="1330" fg:w="19"/><text x="26.1709%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (131 samples, 2.55%)</title><rect x="26.2912%" y="101" width="2.5531%" height="15" fill="rgb(225,35,8)" fg:x="1349" fg:w="131"/><text x="26.5412%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.04%)</title><rect x="28.8443%" y="101" width="0.0390%" height="15" fill="rgb(250,213,24)" fg:x="1480" fg:w="2"/><text x="29.0943%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (11 samples, 0.21%)</title><rect x="29.1366%" y="85" width="0.2144%" height="15" fill="rgb(247,123,22)" fg:x="1495" fg:w="11"/><text x="29.3866%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.64%)</title><rect x="28.8833%" y="101" width="0.6431%" height="15" fill="rgb(231,138,38)" fg:x="1482" fg:w="33"/><text x="29.1333%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.18%)</title><rect x="29.3510%" y="85" width="0.1754%" height="15" fill="rgb(231,145,46)" fg:x="1506" fg:w="9"/><text x="29.6010%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.21%)</title><rect x="29.5264%" y="101" width="0.2144%" height="15" fill="rgb(251,118,11)" fg:x="1515" fg:w="11"/><text x="29.7764%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="29.7408%" y="101" width="0.0195%" height="15" fill="rgb(217,147,25)" fg:x="1526" fg:w="1"/><text x="29.9908%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 1.23%)</title><rect x="29.7603%" y="101" width="1.2278%" height="15" fill="rgb(247,81,37)" fg:x="1527" fg:w="63"/><text x="30.0103%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (80 samples, 1.56%)</title><rect x="30.9881%" y="101" width="1.5592%" height="15" fill="rgb(209,12,38)" fg:x="1590" fg:w="80"/><text x="31.2381%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_vision (2 samples, 0.04%)</title><rect x="32.5473%" y="101" width="0.0390%" height="15" fill="rgb(227,1,9)" fg:x="1670" fg:w="2"/><text x="32.7973%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (9 samples, 0.18%)</title><rect x="34.0285%" y="69" width="0.1754%" height="15" fill="rgb(248,47,43)" fg:x="1746" fg:w="9"/><text x="34.2785%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="34.2039%" y="69" width="0.0195%" height="15" fill="rgb(221,10,30)" fg:x="1755" fg:w="1"/><text x="34.4539%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.19%)</title><rect x="34.4962%" y="53" width="0.1949%" height="15" fill="rgb(210,229,1)" fg:x="1770" fg:w="10"/><text x="34.7462%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (7 samples, 0.14%)</title><rect x="35.0029%" y="37" width="0.1364%" height="15" fill="rgb(222,148,37)" fg:x="1796" fg:w="7"/><text x="35.2529%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (71 samples, 1.38%)</title><rect x="33.9700%" y="85" width="1.3837%" height="15" fill="rgb(234,67,33)" fg:x="1743" fg:w="71"/><text x="34.2200%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (58 samples, 1.13%)</title><rect x="34.2233%" y="69" width="1.1304%" height="15" fill="rgb(247,98,35)" fg:x="1756" fg:w="58"/><text x="34.4733%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (34 samples, 0.66%)</title><rect x="34.6911%" y="53" width="0.6626%" height="15" fill="rgb(247,138,52)" fg:x="1780" fg:w="34"/><text x="34.9411%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.21%)</title><rect x="35.1393%" y="37" width="0.2144%" height="15" fill="rgb(213,79,30)" fg:x="1803" fg:w="11"/><text x="35.3893%" y="47.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::bishop::BishopMoveGen&gt;::generate_pseudolegal_bishop_moves (148 samples, 2.88%)</title><rect x="32.5862%" y="101" width="2.8844%" height="15" fill="rgb(246,177,23)" fg:x="1672" fg:w="148"/><text x="32.8362%" y="111.50">ru..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="35.3537%" y="85" width="0.1169%" height="15" fill="rgb(230,62,27)" fg:x="1814" fg:w="6"/><text x="35.6037%" y="95.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_vision (7 samples, 0.14%)</title><rect x="35.8605%" y="85" width="0.1364%" height="15" fill="rgb(216,154,8)" fg:x="1840" fg:w="7"/><text x="36.1105%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.08%)</title><rect x="36.0748%" y="69" width="0.0780%" height="15" fill="rgb(244,35,45)" fg:x="1851" fg:w="4"/><text x="36.3248%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.16%)</title><rect x="36.1528%" y="69" width="0.1559%" height="15" fill="rgb(251,115,12)" fg:x="1855" fg:w="8"/><text x="36.4028%" y="79.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="36.3087%" y="69" width="0.0195%" height="15" fill="rgb(240,54,50)" fg:x="1863" fg:w="1"/><text x="36.5587%" y="79.50"></text></g><g><title>rust_chess_engine`__rdl_alloc (1 samples, 0.02%)</title><rect x="36.3282%" y="69" width="0.0195%" height="15" fill="rgb(233,84,52)" fg:x="1864" fg:w="1"/><text x="36.5782%" y="79.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::king::KingMoveGen&gt;::generate_pseudolegal_king_moves (47 samples, 0.92%)</title><rect x="35.4707%" y="101" width="0.9160%" height="15" fill="rgb(207,117,47)" fg:x="1820" fg:w="47"/><text x="35.7207%" y="111.50"></text></g><g><title>rust_chess_engine`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.39%)</title><rect x="35.9969%" y="85" width="0.3898%" height="15" fill="rgb(249,43,39)" fg:x="1847" fg:w="20"/><text x="36.2469%" y="95.50"></text></g><g><title>rust_chess_engine`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="36.3477%" y="69" width="0.0390%" height="15" fill="rgb(209,38,44)" fg:x="1865" fg:w="2"/><text x="36.5977%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (12 samples, 0.23%)</title><rect x="37.3027%" y="69" width="0.2339%" height="15" fill="rgb(236,212,23)" fg:x="1914" fg:w="12"/><text x="37.5527%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="37.5365%" y="69" width="0.0195%" height="15" fill="rgb(242,79,21)" fg:x="1926" fg:w="1"/><text x="37.7865%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.10%)</title><rect x="37.8679%" y="53" width="0.0974%" height="15" fill="rgb(211,96,35)" fg:x="1943" fg:w="5"/><text x="38.1179%" y="63.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::knight::KnightMoveGen&gt;::generate_psuedolegal_knight_moves (113 samples, 2.20%)</title><rect x="36.3867%" y="101" width="2.2023%" height="15" fill="rgb(253,215,40)" fg:x="1867" fg:w="113"/><text x="36.6367%" y="111.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 1.33%)</title><rect x="37.2637%" y="85" width="1.3253%" height="15" fill="rgb(211,81,21)" fg:x="1912" fg:w="68"/><text x="37.5137%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 1.03%)</title><rect x="37.5560%" y="69" width="1.0329%" height="15" fill="rgb(208,190,38)" fg:x="1927" fg:w="53"/><text x="37.8060%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.62%)</title><rect x="37.9653%" y="53" width="0.6237%" height="15" fill="rgb(235,213,38)" fg:x="1948" fg:w="32"/><text x="38.2153%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (6 samples, 0.12%)</title><rect x="38.4720%" y="37" width="0.1169%" height="15" fill="rgb(237,122,38)" fg:x="1974" fg:w="6"/><text x="38.7220%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (12 samples, 0.23%)</title><rect x="40.2066%" y="85" width="0.2339%" height="15" fill="rgb(244,218,35)" fg:x="2063" fg:w="12"/><text x="40.4566%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (183 samples, 3.57%)</title><rect x="40.4405%" y="85" width="3.5666%" height="15" fill="rgb(240,68,47)" fg:x="2075" fg:w="183"/><text x="40.6905%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (5 samples, 0.10%)</title><rect x="44.1824%" y="69" width="0.0974%" height="15" fill="rgb(210,16,53)" fg:x="2267" fg:w="5"/><text x="44.4324%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.08%)</title><rect x="44.2799%" y="69" width="0.0780%" height="15" fill="rgb(235,124,12)" fg:x="2272" fg:w="4"/><text x="44.5299%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.18%)</title><rect x="44.5722%" y="53" width="0.1754%" height="15" fill="rgb(224,169,11)" fg:x="2287" fg:w="9"/><text x="44.8222%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (69 samples, 1.34%)</title><rect x="44.0070%" y="85" width="1.3448%" height="15" fill="rgb(250,166,2)" fg:x="2258" fg:w="69"/><text x="44.2570%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (51 samples, 0.99%)</title><rect x="44.3578%" y="69" width="0.9940%" height="15" fill="rgb(242,216,29)" fg:x="2276" fg:w="51"/><text x="44.6078%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (31 samples, 0.60%)</title><rect x="44.7476%" y="53" width="0.6042%" height="15" fill="rgb(230,116,27)" fg:x="2296" fg:w="31"/><text x="44.9976%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (7 samples, 0.14%)</title><rect x="45.2154%" y="37" width="0.1364%" height="15" fill="rgb(228,99,48)" fg:x="2320" fg:w="7"/><text x="45.4654%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="45.3518%" y="85" width="0.0195%" height="15" fill="rgb(253,11,6)" fg:x="2327" fg:w="1"/><text x="45.6018%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (8 samples, 0.16%)</title><rect x="45.3713%" y="85" width="0.1559%" height="15" fill="rgb(247,143,39)" fg:x="2328" fg:w="8"/><text x="45.6213%" y="95.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::pawn::PawnMoveGen&gt;::generate_psuedolegal_pawn_moves (363 samples, 7.07%)</title><rect x="38.5890%" y="101" width="7.0746%" height="15" fill="rgb(236,97,10)" fg:x="1980" fg:w="363"/><text x="38.8390%" y="111.50">rust_ches..</text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.14%)</title><rect x="45.5272%" y="85" width="0.1364%" height="15" fill="rgb(233,208,19)" fg:x="2336" fg:w="7"/><text x="45.7772%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (9 samples, 0.18%)</title><rect x="46.9889%" y="69" width="0.1754%" height="15" fill="rgb(216,164,2)" fg:x="2411" fg:w="9"/><text x="47.2389%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="47.1643%" y="69" width="0.0585%" height="15" fill="rgb(220,129,5)" fg:x="2420" fg:w="3"/><text x="47.4143%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.27%)</title><rect x="47.4956%" y="53" width="0.2729%" height="15" fill="rgb(242,17,10)" fg:x="2437" fg:w="14"/><text x="47.7456%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.10%)</title><rect x="48.0413%" y="37" width="0.0974%" height="15" fill="rgb(242,107,0)" fg:x="2465" fg:w="5"/><text x="48.2913%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (90 samples, 1.75%)</title><rect x="46.7550%" y="85" width="1.7540%" height="15" fill="rgb(251,28,31)" fg:x="2399" fg:w="90"/><text x="47.0050%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (66 samples, 1.29%)</title><rect x="47.2228%" y="69" width="1.2863%" height="15" fill="rgb(233,223,10)" fg:x="2423" fg:w="66"/><text x="47.4728%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (38 samples, 0.74%)</title><rect x="47.7685%" y="53" width="0.7406%" height="15" fill="rgb(215,21,27)" fg:x="2451" fg:w="38"/><text x="48.0185%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.37%)</title><rect x="48.1388%" y="37" width="0.3703%" height="15" fill="rgb(232,23,21)" fg:x="2470" fg:w="19"/><text x="48.3888%" y="47.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::rook::RookMoveGen&gt;::generate_pseudolegal_rook_moves (149 samples, 2.90%)</title><rect x="45.6636%" y="101" width="2.9039%" height="15" fill="rgb(244,5,23)" fg:x="2343" fg:w="149"/><text x="45.9136%" y="111.50">ru..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="48.5091%" y="85" width="0.0585%" height="15" fill="rgb(226,81,46)" fg:x="2489" fg:w="3"/><text x="48.7591%" y="95.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$free (14 samples, 0.27%)</title><rect x="48.5675%" y="101" width="0.2729%" height="15" fill="rgb(247,70,30)" fg:x="2492" fg:w="14"/><text x="48.8175%" y="111.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$malloc (13 samples, 0.25%)</title><rect x="48.8404%" y="101" width="0.2534%" height="15" fill="rgb(212,68,19)" fg:x="2506" fg:w="13"/><text x="49.0904%" y="111.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$memcpy (7 samples, 0.14%)</title><rect x="49.0937%" y="101" width="0.1364%" height="15" fill="rgb(240,187,13)" fg:x="2519" fg:w="7"/><text x="49.3437%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_pseudolegal_moves (1,807 samples, 35.22%)</title><rect x="14.4027%" y="117" width="35.2173%" height="15" fill="rgb(223,113,26)" fg:x="739" fg:w="1807"/><text x="14.6527%" y="127.50">rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game a..</text></g><g><title>rust_chess_engine`__rdl_alloc (20 samples, 0.39%)</title><rect x="49.2302%" y="101" width="0.3898%" height="15" fill="rgb(206,192,2)" fg:x="2526" fg:w="20"/><text x="49.4802%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::bishop::BishopMoveGen&gt;::generate_pseudolegal_bishop_moves (3 samples, 0.06%)</title><rect x="49.6200%" y="117" width="0.0585%" height="15" fill="rgb(241,108,4)" fg:x="2546" fg:w="3"/><text x="49.8700%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::king::KingMoveGen&gt;::generate_pseudolegal_king_moves (5 samples, 0.10%)</title><rect x="49.6784%" y="117" width="0.0974%" height="15" fill="rgb(247,173,49)" fg:x="2549" fg:w="5"/><text x="49.9284%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::rook::RookMoveGen&gt;::generate_pseudolegal_rook_moves (5 samples, 0.10%)</title><rect x="49.7759%" y="117" width="0.0974%" height="15" fill="rgb(224,114,35)" fg:x="2554" fg:w="5"/><text x="50.0259%" y="127.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_bishop_mask (96 samples, 1.87%)</title><rect x="64.5683%" y="101" width="1.8710%" height="15" fill="rgb(245,159,27)" fg:x="3313" fg:w="96"/><text x="64.8183%" y="111.50">r..</text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::simulate::Simulate&gt;::check_move_legality (943 samples, 18.38%)</title><rect x="49.8733%" y="117" width="18.3785%" height="15" fill="rgb(245,172,44)" fg:x="2559" fg:w="943"/><text x="50.1233%" y="127.50">rust_chess_engine`&lt;rust_chess..</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_rook_mask (93 samples, 1.81%)</title><rect x="66.4393%" y="101" width="1.8125%" height="15" fill="rgb(236,23,11)" fg:x="3409" fg:w="93"/><text x="66.6893%" y="111.50">r..</text></g><g><title>rust_chess_engine`DYLD-STUB$$free (14 samples, 0.27%)</title><rect x="68.2518%" y="117" width="0.2729%" height="15" fill="rgb(205,117,38)" fg:x="3502" fg:w="14"/><text x="68.5018%" y="127.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$malloc (5 samples, 0.10%)</title><rect x="68.5247%" y="117" width="0.0974%" height="15" fill="rgb(237,72,25)" fg:x="3516" fg:w="5"/><text x="68.7747%" y="127.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$memcpy (7 samples, 0.14%)</title><rect x="68.6221%" y="117" width="0.1364%" height="15" fill="rgb(244,70,9)" fg:x="3521" fg:w="7"/><text x="68.8721%" y="127.50"></text></g><g><title>rust_chess_engine`__rdl_dealloc (3 samples, 0.06%)</title><rect x="68.7585%" y="117" width="0.0585%" height="15" fill="rgb(217,125,39)" fg:x="3528" fg:w="3"/><text x="69.0085%" y="127.50"></text></g><g><title>rust_chess_engine`core::result::Result&lt;T,E&gt;::expect (78 samples, 1.52%)</title><rect x="68.8170%" y="117" width="1.5202%" height="15" fill="rgb(235,36,10)" fg:x="3531" fg:w="78"/><text x="69.0670%" y="127.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (1,237 samples, 24.11%)</title><rect x="70.3372%" y="117" width="24.1084%" height="15" fill="rgb(251,123,47)" fg:x="3609" fg:w="1237"/><text x="70.5872%" y="127.50">rust_chess_engine`rust_chess_engine::c..</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_bishop_mask (2 samples, 0.04%)</title><rect x="94.4455%" y="117" width="0.0390%" height="15" fill="rgb(221,13,13)" fg:x="4846" fg:w="2"/><text x="94.6955%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_legal_moves (4,607 samples, 89.79%)</title><rect x="4.7164%" y="133" width="89.7876%" height="15" fill="rgb(238,131,9)" fg:x="242" fg:w="4607"/><text x="4.9664%" y="143.50">rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_legal_moves</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_rook_mask (1 samples, 0.02%)</title><rect x="94.4845%" y="117" width="0.0195%" height="15" fill="rgb(211,50,8)" fg:x="4848" fg:w="1"/><text x="94.7345%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_pseudolegal_moves (1 samples, 0.02%)</title><rect x="94.5040%" y="133" width="0.0195%" height="15" fill="rgb(245,182,24)" fg:x="4849" fg:w="1"/><text x="94.7540%" y="143.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::simulate::Simulate&gt;::check_move_legality (74 samples, 1.44%)</title><rect x="94.5235%" y="133" width="1.4422%" height="15" fill="rgb(242,14,37)" fg:x="4850" fg:w="74"/><text x="94.7735%" y="143.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="95.9657%" y="133" width="0.0390%" height="15" fill="rgb(246,228,12)" fg:x="4924" fg:w="2"/><text x="96.2157%" y="143.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (54 samples, 1.05%)</title><rect x="96.0047%" y="133" width="1.0524%" height="15" fill="rgb(213,55,15)" fg:x="4926" fg:w="54"/><text x="96.2547%" y="143.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::game::Game::apply_move (24 samples, 0.47%)</title><rect x="97.0571%" y="133" width="0.4677%" height="15" fill="rgb(209,9,3)" fg:x="4980" fg:w="24"/><text x="97.3071%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (85 samples, 1.66%)</title><rect x="97.5248%" y="69" width="1.6566%" height="15" fill="rgb(230,59,30)" fg:x="5004" fg:w="85"/><text x="97.7748%" y="79.50"></text></g><g><title>rust_chess_engine`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.06%)</title><rect x="99.8636%" y="53" width="0.0585%" height="15" fill="rgb(209,121,21)" fg:x="5124" fg:w="3"/><text x="100.1136%" y="63.50"></text></g><g><title>rust_chess_engine`rand::random (3 samples, 0.06%)</title><rect x="99.9220%" y="53" width="0.0585%" height="15" fill="rgb(220,109,13)" fg:x="5127" fg:w="3"/><text x="100.1720%" y="63.50"></text></g><g><title>rust_chess_engine`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.04%)</title><rect x="99.9415%" y="37" width="0.0390%" height="15" fill="rgb(232,18,1)" fg:x="5128" fg:w="2"/><text x="100.1915%" y="47.50"></text></g><g><title>all (5,131 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="5131"/><text x="0.2500%" y="255.50"></text></g><g><title>dyld`start (5,131 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="5131"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>rust_chess_engine`main (5,130 samples, 99.98%)</title><rect x="0.0195%" y="213" width="99.9805%" height="15" fill="rgb(240,125,3)" fg:x="1" fg:w="5130"/><text x="0.2695%" y="223.50">rust_chess_engine`main</text></g><g><title>rust_chess_engine`std::rt::lang_start_internal (5,130 samples, 99.98%)</title><rect x="0.0195%" y="197" width="99.9805%" height="15" fill="rgb(205,98,50)" fg:x="1" fg:w="5130"/><text x="0.2695%" y="207.50">rust_chess_engine`std::rt::lang_start_internal</text></g><g><title>rust_chess_engine`std::rt::lang_start::_{{closure}} (5,130 samples, 99.98%)</title><rect x="0.0195%" y="181" width="99.9805%" height="15" fill="rgb(205,185,37)" fg:x="1" fg:w="5130"/><text x="0.2695%" y="191.50">rust_chess_engine`std::rt::lang_start::_{{closure}}</text></g><g><title>rust_chess_engine`std::sys::backtrace::__rust_begin_short_backtrace (5,130 samples, 99.98%)</title><rect x="0.0195%" y="165" width="99.9805%" height="15" fill="rgb(238,207,15)" fg:x="1" fg:w="5130"/><text x="0.2695%" y="175.50">rust_chess_engine`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_chess_engine`rust_chess_engine::main (5,089 samples, 99.18%)</title><rect x="0.8186%" y="149" width="99.1814%" height="15" fill="rgb(213,199,42)" fg:x="42" fg:w="5089"/><text x="1.0686%" y="159.50">rust_chess_engine`rust_chess_engine::main</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::get_rook_magic_map (127 samples, 2.48%)</title><rect x="97.5248%" y="133" width="2.4752%" height="15" fill="rgb(235,201,11)" fg:x="5004" fg:w="127"/><text x="97.7748%" y="143.50">ru..</text></g><g><title>rust_chess_engine`std::sync::once_lock::OnceLock&lt;T&gt;::initialize (127 samples, 2.48%)</title><rect x="97.5248%" y="117" width="2.4752%" height="15" fill="rgb(207,46,11)" fg:x="5004" fg:w="127"/><text x="97.7748%" y="127.50">ru..</text></g><g><title>rust_chess_engine`std::sys::sync::once::queue::Once::call (127 samples, 2.48%)</title><rect x="97.5248%" y="101" width="2.4752%" height="15" fill="rgb(241,35,35)" fg:x="5004" fg:w="127"/><text x="97.7748%" y="111.50">ru..</text></g><g><title>rust_chess_engine`std::sync::once::Once::call_once_force::_{{closure}} (127 samples, 2.48%)</title><rect x="97.5248%" y="85" width="2.4752%" height="15" fill="rgb(243,32,47)" fg:x="5004" fg:w="127"/><text x="97.7748%" y="95.50">ru..</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::compute_rook_magic_map (42 samples, 0.82%)</title><rect x="99.1814%" y="69" width="0.8186%" height="15" fill="rgb(247,202,23)" fg:x="5089" fg:w="42"/><text x="99.4314%" y="79.50"></text></g><g><title>rust_chess_engine`rand::rngs::thread::thread_rng (1 samples, 0.02%)</title><rect x="99.9805%" y="53" width="0.0195%" height="15" fill="rgb(219,102,11)" fg:x="5130" fg:w="1"/><text x="100.2305%" y="63.50"></text></g></svg></svg>