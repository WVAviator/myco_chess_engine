<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="2206"><g><title>rust_chess_engine`rust_chess_engine::magic::get_bishop_magic_map (1 samples, 0.05%)</title><rect x="0.0000%" y="229" width="0.0453%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>rust_chess_engine`std::sync::once_lock::OnceLock&lt;T&gt;::initialize (1 samples, 0.05%)</title><rect x="0.0000%" y="213" width="0.0453%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>rust_chess_engine`std::sys::sync::once::queue::Once::call (1 samples, 0.05%)</title><rect x="0.0000%" y="197" width="0.0453%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>rust_chess_engine`std::sync::once::Once::call_once_force::_{{closure}} (1 samples, 0.05%)</title><rect x="0.0000%" y="181" width="0.0453%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.05%)</title><rect x="0.0000%" y="165" width="0.0453%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (86 samples, 3.90%)</title><rect x="0.0453%" y="165" width="3.8985%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="86"/><text x="0.2953%" y="175.50">libs..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="6.2103%" y="149" width="0.0453%" height="15" fill="rgb(207,160,47)" fg:x="137" fg:w="1"/><text x="6.4603%" y="159.50"></text></g><g><title>rust_chess_engine`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.09%)</title><rect x="6.2557%" y="149" width="0.0907%" height="15" fill="rgb(228,23,34)" fg:x="138" fg:w="2"/><text x="6.5057%" y="159.50"></text></g><g><title>rust_chess_engine`rand::random (3 samples, 0.14%)</title><rect x="6.3463%" y="149" width="0.1360%" height="15" fill="rgb(218,30,26)" fg:x="140" fg:w="3"/><text x="6.5963%" y="159.50"></text></g><g><title>rust_chess_engine`&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (3 samples, 0.14%)</title><rect x="6.3463%" y="133" width="0.1360%" height="15" fill="rgb(220,122,19)" fg:x="140" fg:w="3"/><text x="6.5963%" y="143.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::magic::get_rook_magic_map (143 samples, 6.48%)</title><rect x="0.0453%" y="229" width="6.4823%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="143"/><text x="0.2953%" y="239.50">rust_che..</text></g><g><title>rust_chess_engine`std::sync::once_lock::OnceLock&lt;T&gt;::initialize (143 samples, 6.48%)</title><rect x="0.0453%" y="213" width="6.4823%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="143"/><text x="0.2953%" y="223.50">rust_che..</text></g><g><title>rust_chess_engine`std::sys::sync::once::queue::Once::call (143 samples, 6.48%)</title><rect x="0.0453%" y="197" width="6.4823%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="143"/><text x="0.2953%" y="207.50">rust_che..</text></g><g><title>rust_chess_engine`std::sync::once::Once::call_once_force::_{{closure}} (143 samples, 6.48%)</title><rect x="0.0453%" y="181" width="6.4823%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="143"/><text x="0.2953%" y="191.50">rust_che..</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::compute_rook_magic_map (57 samples, 2.58%)</title><rect x="3.9438%" y="165" width="2.5839%" height="15" fill="rgb(217,207,13)" fg:x="87" fg:w="57"/><text x="4.1938%" y="175.50">ru..</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::raycast::raycast_rook (1 samples, 0.05%)</title><rect x="6.4823%" y="149" width="0.0453%" height="15" fill="rgb(231,73,38)" fg:x="143" fg:w="1"/><text x="6.7323%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="6.5277%" y="165" width="0.0453%" height="15" fill="rgb(225,20,46)" fg:x="144" fg:w="1"/><text x="6.7777%" y="175.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_pseudolegal_moves (1 samples, 0.05%)</title><rect x="6.5730%" y="149" width="0.0453%" height="15" fill="rgb(210,31,41)" fg:x="145" fg:w="1"/><text x="6.8230%" y="159.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::pawn::PawnMoveGen&gt;::generate_psuedolegal_pawn_moves (1 samples, 0.05%)</title><rect x="6.5730%" y="133" width="0.0453%" height="15" fill="rgb(221,200,47)" fg:x="145" fg:w="1"/><text x="6.8230%" y="143.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_legal_moves (3 samples, 0.14%)</title><rect x="6.5730%" y="165" width="0.1360%" height="15" fill="rgb(226,26,5)" fg:x="145" fg:w="3"/><text x="6.8230%" y="175.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (2 samples, 0.09%)</title><rect x="6.6183%" y="149" width="0.0907%" height="15" fill="rgb(249,33,26)" fg:x="146" fg:w="2"/><text x="6.8683%" y="159.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (1 samples, 0.05%)</title><rect x="6.7090%" y="165" width="0.0453%" height="15" fill="rgb(235,183,28)" fg:x="148" fg:w="1"/><text x="6.9590%" y="175.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::game::Game::apply_move (2 samples, 0.09%)</title><rect x="6.7543%" y="165" width="0.0907%" height="15" fill="rgb(221,5,38)" fg:x="149" fg:w="2"/><text x="7.0043%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="7.1623%" y="149" width="0.1360%" height="15" fill="rgb(247,18,42)" fg:x="158" fg:w="3"/><text x="7.4123%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.14%)</title><rect x="7.2983%" y="149" width="0.1360%" height="15" fill="rgb(241,131,45)" fg:x="161" fg:w="3"/><text x="7.5483%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.18%)</title><rect x="7.4343%" y="149" width="0.1813%" height="15" fill="rgb(249,31,29)" fg:x="164" fg:w="4"/><text x="7.6843%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.09%)</title><rect x="7.5249%" y="133" width="0.0907%" height="15" fill="rgb(225,111,53)" fg:x="166" fg:w="2"/><text x="7.7749%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.14%)</title><rect x="7.6156%" y="149" width="0.1360%" height="15" fill="rgb(238,160,17)" fg:x="168" fg:w="3"/><text x="7.8656%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.14%)</title><rect x="7.9329%" y="133" width="0.1360%" height="15" fill="rgb(214,148,48)" fg:x="175" fg:w="3"/><text x="8.1829%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.05%)</title><rect x="8.0689%" y="117" width="0.0453%" height="15" fill="rgb(232,36,49)" fg:x="178" fg:w="1"/><text x="8.3189%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::bishop::BishopMoveGen&gt;::generate_pseudolegal_bishop_moves (2 samples, 0.09%)</title><rect x="8.1142%" y="117" width="0.0907%" height="15" fill="rgb(209,103,24)" fg:x="179" fg:w="2"/><text x="8.3642%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::king::KingMoveGen&gt;::generate_pseudolegal_king_moves (1 samples, 0.05%)</title><rect x="8.2049%" y="117" width="0.0453%" height="15" fill="rgb(229,88,8)" fg:x="181" fg:w="1"/><text x="8.4549%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.09%)</title><rect x="8.2956%" y="101" width="0.0907%" height="15" fill="rgb(213,181,19)" fg:x="183" fg:w="2"/><text x="8.5456%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="8.3409%" y="85" width="0.0453%" height="15" fill="rgb(254,191,54)" fg:x="184" fg:w="1"/><text x="8.5909%" y="95.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::knight::KnightMoveGen&gt;::generate_psuedolegal_knight_moves (5 samples, 0.23%)</title><rect x="8.2502%" y="117" width="0.2267%" height="15" fill="rgb(241,83,37)" fg:x="182" fg:w="5"/><text x="8.5002%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.09%)</title><rect x="8.3862%" y="101" width="0.0907%" height="15" fill="rgb(233,36,39)" fg:x="185" fg:w="2"/><text x="8.6362%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.09%)</title><rect x="8.3862%" y="85" width="0.0907%" height="15" fill="rgb(226,3,54)" fg:x="185" fg:w="2"/><text x="8.6362%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="8.4316%" y="69" width="0.0453%" height="15" fill="rgb(245,192,40)" fg:x="186" fg:w="1"/><text x="8.6816%" y="79.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::pawn::PawnMoveGen&gt;::generate_psuedolegal_pawn_moves (5 samples, 0.23%)</title><rect x="8.4769%" y="117" width="0.2267%" height="15" fill="rgb(238,167,29)" fg:x="187" fg:w="5"/><text x="8.7269%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_pseudolegal_moves (15 samples, 0.68%)</title><rect x="8.0689%" y="133" width="0.6800%" height="15" fill="rgb(232,182,51)" fg:x="178" fg:w="15"/><text x="8.3189%" y="143.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::rook::RookMoveGen&gt;::generate_pseudolegal_rook_moves (1 samples, 0.05%)</title><rect x="8.7035%" y="117" width="0.0453%" height="15" fill="rgb(231,60,39)" fg:x="192" fg:w="1"/><text x="8.9535%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::simulate::Simulate&gt;::check_move_legality (8 samples, 0.36%)</title><rect x="8.7489%" y="133" width="0.3626%" height="15" fill="rgb(208,69,12)" fg:x="193" fg:w="8"/><text x="8.9989%" y="143.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_bishop_mask (1 samples, 0.05%)</title><rect x="9.0662%" y="117" width="0.0453%" height="15" fill="rgb(235,93,37)" fg:x="200" fg:w="1"/><text x="9.3162%" y="127.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (34 samples, 1.54%)</title><rect x="9.1115%" y="133" width="1.5413%" height="15" fill="rgb(213,116,39)" fg:x="201" fg:w="34"/><text x="9.3615%" y="143.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_legal_moves (65 samples, 2.95%)</title><rect x="7.7516%" y="149" width="2.9465%" height="15" fill="rgb(222,207,29)" fg:x="171" fg:w="65"/><text x="8.0016%" y="159.50">ru..</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_bishop_mask (1 samples, 0.05%)</title><rect x="10.6528%" y="133" width="0.0453%" height="15" fill="rgb(206,96,30)" fg:x="235" fg:w="1"/><text x="10.9028%" y="143.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::simulate::Simulate&gt;::check_move_legality (2 samples, 0.09%)</title><rect x="10.6981%" y="149" width="0.0907%" height="15" fill="rgb(218,138,4)" fg:x="236" fg:w="2"/><text x="10.9481%" y="159.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="10.7888%" y="149" width="0.0453%" height="15" fill="rgb(250,191,14)" fg:x="238" fg:w="1"/><text x="11.0388%" y="159.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (25 samples, 1.13%)</title><rect x="10.8341%" y="149" width="1.1333%" height="15" fill="rgb(239,60,40)" fg:x="239" fg:w="25"/><text x="11.0841%" y="159.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::game::Game::apply_move (35 samples, 1.59%)</title><rect x="11.9674%" y="149" width="1.5866%" height="15" fill="rgb(206,27,48)" fg:x="264" fg:w="35"/><text x="12.2174%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.09%)</title><rect x="21.3962%" y="133" width="0.0907%" height="15" fill="rgb(225,35,8)" fg:x="472" fg:w="2"/><text x="21.6462%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="21.4869%" y="133" width="0.0453%" height="15" fill="rgb(250,213,24)" fg:x="474" fg:w="1"/><text x="21.7369%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="21.5322%" y="133" width="0.0453%" height="15" fill="rgb(247,123,22)" fg:x="475" fg:w="1"/><text x="21.7822%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="21.5775%" y="133" width="0.0453%" height="15" fill="rgb(231,138,38)" fg:x="476" fg:w="1"/><text x="21.8275%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.05%)</title><rect x="21.8948%" y="117" width="0.0453%" height="15" fill="rgb(231,145,46)" fg:x="483" fg:w="1"/><text x="22.1448%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.86%)</title><rect x="21.6228%" y="133" width="0.8613%" height="15" fill="rgb(251,118,11)" fg:x="477" fg:w="19"/><text x="21.8728%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.54%)</title><rect x="21.9402%" y="117" width="0.5440%" height="15" fill="rgb(217,147,25)" fg:x="484" fg:w="12"/><text x="22.1902%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.09%)</title><rect x="22.3935%" y="101" width="0.0907%" height="15" fill="rgb(247,81,37)" fg:x="494" fg:w="2"/><text x="22.6435%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="22.4841%" y="133" width="0.0453%" height="15" fill="rgb(209,12,38)" fg:x="496" fg:w="1"/><text x="22.7341%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="22.5295%" y="133" width="0.0453%" height="15" fill="rgb(227,1,9)" fg:x="497" fg:w="1"/><text x="22.7795%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (69 samples, 3.13%)</title><rect x="22.5748%" y="133" width="3.1278%" height="15" fill="rgb(248,47,43)" fg:x="498" fg:w="69"/><text x="22.8248%" y="143.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.32%)</title><rect x="25.7026%" y="133" width="0.3173%" height="15" fill="rgb(221,10,30)" fg:x="567" fg:w="7"/><text x="25.9526%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (4 samples, 0.18%)</title><rect x="29.0571%" y="101" width="0.1813%" height="15" fill="rgb(210,229,1)" fg:x="641" fg:w="4"/><text x="29.3071%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.23%)</title><rect x="29.6011%" y="85" width="0.2267%" height="15" fill="rgb(222,148,37)" fg:x="653" fg:w="5"/><text x="29.8511%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.23%)</title><rect x="30.1904%" y="69" width="0.2267%" height="15" fill="rgb(234,67,33)" fg:x="666" fg:w="5"/><text x="30.4404%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 1.50%)</title><rect x="28.9665%" y="117" width="1.4959%" height="15" fill="rgb(247,98,35)" fg:x="639" fg:w="33"/><text x="29.2165%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (27 samples, 1.22%)</title><rect x="29.2384%" y="101" width="1.2239%" height="15" fill="rgb(247,138,52)" fg:x="645" fg:w="27"/><text x="29.4884%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.63%)</title><rect x="29.8277%" y="85" width="0.6346%" height="15" fill="rgb(213,79,30)" fg:x="658" fg:w="14"/><text x="30.0777%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="30.4170%" y="69" width="0.0453%" height="15" fill="rgb(246,177,23)" fg:x="671" fg:w="1"/><text x="30.6670%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (71 samples, 3.22%)</title><rect x="30.4624%" y="117" width="3.2185%" height="15" fill="rgb(230,62,27)" fg:x="672" fg:w="71"/><text x="30.7124%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.27%)</title><rect x="33.8169%" y="101" width="0.2720%" height="15" fill="rgb(216,154,8)" fg:x="746" fg:w="6"/><text x="34.0669%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="34.0888%" y="101" width="0.0453%" height="15" fill="rgb(244,35,45)" fg:x="752" fg:w="1"/><text x="34.3388%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.14%)</title><rect x="34.1342%" y="101" width="0.1360%" height="15" fill="rgb(251,115,12)" fg:x="753" fg:w="3"/><text x="34.3842%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.18%)</title><rect x="34.2702%" y="101" width="0.1813%" height="15" fill="rgb(240,54,50)" fg:x="756" fg:w="4"/><text x="34.5202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="34.4515%" y="101" width="0.0453%" height="15" fill="rgb(233,84,52)" fg:x="760" fg:w="1"/><text x="34.7015%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="34.4968%" y="101" width="0.0453%" height="15" fill="rgb(207,117,47)" fg:x="761" fg:w="1"/><text x="34.7468%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="34.5422%" y="101" width="0.0453%" height="15" fill="rgb(249,43,39)" fg:x="762" fg:w="1"/><text x="34.7922%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_vision (1 samples, 0.05%)</title><rect x="34.5875%" y="101" width="0.0453%" height="15" fill="rgb(209,38,44)" fg:x="763" fg:w="1"/><text x="34.8375%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::bishop::BishopMoveGen&gt;::generate_pseudolegal_bishop_moves (45 samples, 2.04%)</title><rect x="34.6328%" y="101" width="2.0399%" height="15" fill="rgb(236,212,23)" fg:x="764" fg:w="45"/><text x="34.8828%" y="111.50">r..</text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::king::KingMoveGen&gt;::generate_pseudolegal_king_moves (13 samples, 0.59%)</title><rect x="36.6727%" y="101" width="0.5893%" height="15" fill="rgb(242,79,21)" fg:x="809" fg:w="13"/><text x="36.9227%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.09%)</title><rect x="37.6247%" y="85" width="0.0907%" height="15" fill="rgb(211,96,35)" fg:x="830" fg:w="2"/><text x="37.8747%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.05%)</title><rect x="37.7153%" y="85" width="0.0453%" height="15" fill="rgb(253,215,40)" fg:x="832" fg:w="1"/><text x="37.9653%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.05%)</title><rect x="38.1233%" y="69" width="0.0453%" height="15" fill="rgb(211,81,21)" fg:x="841" fg:w="1"/><text x="38.3733%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 1.00%)</title><rect x="37.7607%" y="85" width="0.9973%" height="15" fill="rgb(208,190,38)" fg:x="833" fg:w="22"/><text x="38.0107%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.59%)</title><rect x="38.1686%" y="69" width="0.5893%" height="15" fill="rgb(235,213,38)" fg:x="842" fg:w="13"/><text x="38.4186%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.14%)</title><rect x="39.0752%" y="69" width="0.1360%" height="15" fill="rgb(237,122,38)" fg:x="862" fg:w="3"/><text x="39.3252%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="39.2112%" y="69" width="0.0453%" height="15" fill="rgb(244,218,35)" fg:x="865" fg:w="1"/><text x="39.4612%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.14%)</title><rect x="39.6646%" y="53" width="0.1360%" height="15" fill="rgb(240,68,47)" fg:x="875" fg:w="3"/><text x="39.9146%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 1.45%)</title><rect x="38.7579%" y="85" width="1.4506%" height="15" fill="rgb(210,16,53)" fg:x="855" fg:w="32"/><text x="39.0079%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.95%)</title><rect x="39.2566%" y="69" width="0.9519%" height="15" fill="rgb(235,124,12)" fg:x="866" fg:w="21"/><text x="39.5066%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.41%)</title><rect x="39.8005%" y="53" width="0.4080%" height="15" fill="rgb(224,169,11)" fg:x="878" fg:w="9"/><text x="40.0505%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.18%)</title><rect x="40.0272%" y="37" width="0.1813%" height="15" fill="rgb(250,166,2)" fg:x="883" fg:w="4"/><text x="40.2772%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="40.2085%" y="85" width="0.0453%" height="15" fill="rgb(242,216,29)" fg:x="887" fg:w="1"/><text x="40.4585%" y="95.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::knight::KnightMoveGen&gt;::generate_psuedolegal_knight_moves (70 samples, 3.17%)</title><rect x="37.2620%" y="101" width="3.1732%" height="15" fill="rgb(230,116,27)" fg:x="822" fg:w="70"/><text x="37.5120%" y="111.50">rus..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.18%)</title><rect x="40.2539%" y="85" width="0.1813%" height="15" fill="rgb(228,99,48)" fg:x="888" fg:w="4"/><text x="40.5039%" y="95.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::pawn::PawnMoveGen&gt;::generate_psuedolegal_pawn_moves (67 samples, 3.04%)</title><rect x="40.4352%" y="101" width="3.0372%" height="15" fill="rgb(253,11,6)" fg:x="892" fg:w="67"/><text x="40.6852%" y="111.50">rus..</text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::rook::RookMoveGen&gt;::generate_pseudolegal_rook_moves (25 samples, 1.13%)</title><rect x="43.4723%" y="101" width="1.1333%" height="15" fill="rgb(247,143,39)" fg:x="959" fg:w="25"/><text x="43.7223%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_pseudolegal_moves (244 samples, 11.06%)</title><rect x="33.6809%" y="117" width="11.0607%" height="15" fill="rgb(236,97,10)" fg:x="743" fg:w="244"/><text x="33.9309%" y="127.50">rust_chess_engin..</text></g><g><title>rust_chess_engine`DYLD-STUB$$malloc (3 samples, 0.14%)</title><rect x="44.6056%" y="101" width="0.1360%" height="15" fill="rgb(233,208,19)" fg:x="984" fg:w="3"/><text x="44.8556%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::bishop::BishopMoveGen&gt;::generate_pseudolegal_bishop_moves (1 samples, 0.05%)</title><rect x="44.7416%" y="117" width="0.0453%" height="15" fill="rgb(216,164,2)" fg:x="987" fg:w="1"/><text x="44.9916%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::knight::KnightMoveGen&gt;::generate_psuedolegal_knight_moves (1 samples, 0.05%)</title><rect x="44.7869%" y="117" width="0.0453%" height="15" fill="rgb(220,129,5)" fg:x="988" fg:w="1"/><text x="45.0369%" y="127.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_bishop_mask (23 samples, 1.04%)</title><rect x="56.0743%" y="101" width="1.0426%" height="15" fill="rgb(242,17,10)" fg:x="1237" fg:w="23"/><text x="56.3243%" y="111.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::simulate::Simulate&gt;::check_move_legality (305 samples, 13.83%)</title><rect x="44.8323%" y="117" width="13.8259%" height="15" fill="rgb(242,107,0)" fg:x="989" fg:w="305"/><text x="45.0823%" y="127.50">rust_chess_engine`&lt;ru..</text></g><g><title>rust_chess_engine`rust_chess_engine::magic::masks::get_rook_mask (34 samples, 1.54%)</title><rect x="57.1170%" y="101" width="1.5413%" height="15" fill="rgb(251,28,31)" fg:x="1260" fg:w="34"/><text x="57.3670%" y="111.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$memcpy (1 samples, 0.05%)</title><rect x="58.6582%" y="117" width="0.0453%" height="15" fill="rgb(233,223,10)" fg:x="1294" fg:w="1"/><text x="58.9082%" y="127.50"></text></g><g><title>rust_chess_engine`core::result::Result&lt;T,E&gt;::expect (26 samples, 1.18%)</title><rect x="58.7035%" y="117" width="1.1786%" height="15" fill="rgb(215,21,27)" fg:x="1295" fg:w="26"/><text x="58.9535%" y="127.50"></text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::MoveGen&gt;::generate_legal_moves (1,074 samples, 48.69%)</title><rect x="26.0199%" y="133" width="48.6854%" height="15" fill="rgb(232,23,21)" fg:x="574" fg:w="1074"/><text x="26.2699%" y="143.50">rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::mo..</text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (327 samples, 14.82%)</title><rect x="59.8821%" y="117" width="14.8232%" height="15" fill="rgb(244,5,23)" fg:x="1321" fg:w="327"/><text x="60.1321%" y="127.50">rust_chess_engine`rust_..</text></g><g><title>rust_chess_engine`&lt;rust_chess_engine::cgame::game::Game as rust_chess_engine::movegen::simulate::Simulate&gt;::check_move_legality (20 samples, 0.91%)</title><rect x="74.7053%" y="133" width="0.9066%" height="15" fill="rgb(226,81,46)" fg:x="1648" fg:w="20"/><text x="74.9553%" y="143.50"></text></g><g><title>rust_chess_engine`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="75.6120%" y="133" width="0.0453%" height="15" fill="rgb(247,70,30)" fg:x="1668" fg:w="1"/><text x="75.8620%" y="143.50"></text></g><g><title>rust_chess_engine`__rdl_alloc (2 samples, 0.09%)</title><rect x="75.6573%" y="133" width="0.0907%" height="15" fill="rgb(212,68,19)" fg:x="1669" fg:w="2"/><text x="75.9073%" y="143.50"></text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::board::Board::apply_move (356 samples, 16.14%)</title><rect x="75.7480%" y="133" width="16.1378%" height="15" fill="rgb(240,187,13)" fg:x="1671" fg:w="356"/><text x="75.9980%" y="143.50">rust_chess_engine`rust_ch..</text></g><g><title>all (2,206 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="2206"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (2,206 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="2206"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>rust_chess_engine`main (2,206 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="2206"/><text x="0.2500%" y="319.50">rust_chess_engine`main</text></g><g><title>rust_chess_engine`std::rt::lang_start_internal (2,206 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="2206"/><text x="0.2500%" y="303.50">rust_chess_engine`std::rt::lang_start_internal</text></g><g><title>rust_chess_engine`std::rt::lang_start::_{{closure}} (2,206 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="2206"/><text x="0.2500%" y="287.50">rust_chess_engine`std::rt::lang_start::_{{closure}}</text></g><g><title>rust_chess_engine`std::sys::backtrace::__rust_begin_short_backtrace (2,206 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="2206"/><text x="0.2500%" y="271.50">rust_chess_engine`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_chess_engine`rust_chess_engine::main (2,206 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="2206"/><text x="0.2500%" y="255.50">rust_chess_engine`rust_chess_engine::main</text></g><g><title>rust_chess_engine`rust_chess_engine::perft (2,062 samples, 93.47%)</title><rect x="6.5277%" y="229" width="93.4723%" height="15" fill="rgb(236,23,11)" fg:x="144" fg:w="2062"/><text x="6.7777%" y="239.50">rust_chess_engine`rust_chess_engine::perft</text></g><g><title>rust_chess_engine`rust_chess_engine::perft (2,062 samples, 93.47%)</title><rect x="6.5277%" y="213" width="93.4723%" height="15" fill="rgb(205,117,38)" fg:x="144" fg:w="2062"/><text x="6.7777%" y="223.50">rust_chess_engine`rust_chess_engine::perft</text></g><g><title>rust_chess_engine`rust_chess_engine::perft (2,062 samples, 93.47%)</title><rect x="6.5277%" y="197" width="93.4723%" height="15" fill="rgb(237,72,25)" fg:x="144" fg:w="2062"/><text x="6.7777%" y="207.50">rust_chess_engine`rust_chess_engine::perft</text></g><g><title>rust_chess_engine`rust_chess_engine::perft (2,062 samples, 93.47%)</title><rect x="6.5277%" y="181" width="93.4723%" height="15" fill="rgb(244,70,9)" fg:x="144" fg:w="2062"/><text x="6.7777%" y="191.50">rust_chess_engine`rust_chess_engine::perft</text></g><g><title>rust_chess_engine`rust_chess_engine::perft (2,055 samples, 93.16%)</title><rect x="6.8450%" y="165" width="93.1550%" height="15" fill="rgb(217,125,39)" fg:x="151" fg:w="2055"/><text x="7.0950%" y="175.50">rust_chess_engine`rust_chess_engine::perft</text></g><g><title>rust_chess_engine`rust_chess_engine::perft (1,907 samples, 86.45%)</title><rect x="13.5539%" y="149" width="86.4461%" height="15" fill="rgb(235,36,10)" fg:x="299" fg:w="1907"/><text x="13.8039%" y="159.50">rust_chess_engine`rust_chess_engine::perft</text></g><g><title>rust_chess_engine`rust_chess_engine::cgame::game::Game::apply_move (179 samples, 8.11%)</title><rect x="91.8858%" y="133" width="8.1142%" height="15" fill="rgb(251,123,47)" fg:x="2027" fg:w="179"/><text x="92.1358%" y="143.50">rust_chess_..</text></g></svg></svg>